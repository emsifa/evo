"use strict";(self.webpackChunkevo=self.webpackChunkevo||[]).push([[1],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),m=s(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4876:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],u={sidebar_position:2},l="Routing",s={unversionedId:"routing",id:"routing",isDocsHomePage:!1,title:"Routing",description:"Register Route",source:"@site/docs/routing.md",sourceDirName:".",slug:"/routing",permalink:"/evo/docs/routing",editUrl:"https://github.com/emsifa/evo/edit/main/website/docs/routing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Hello World",permalink:"/evo/docs/getting-started/hello-world"},next:{title:"Request",permalink:"/evo/docs/request"}},p=[{value:"Register Route",id:"register-route",children:[]},{value:"Route Prefixing",id:"route-prefixing",children:[]},{value:"Route Naming",id:"route-naming",children:[]},{value:"Applying Middleware",id:"applying-middleware",children:[]}],c={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"routing"},"Routing"),(0,a.kt)("h2",{id:"register-route"},"Register Route"),(0,a.kt)("p",null,"To be able to use Laravel Controller in Evo's way, you have to register route with ",(0,a.kt)("inlineCode",{parentName:"p"},"EvoFacade::routes")," method like following code below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"// routes/web.php or routes/api.php\n\nuse Emsifa\\Evo\\EvoFacade as Evo;\n\nEvo::routes(App\\Http\\Controllers\\UserController::class);\n")),(0,a.kt)("p",null,"Then in your ",(0,a.kt)("inlineCode",{parentName:"p"},"UserController"),", you can attach route attribute such as ",(0,a.kt)("inlineCode",{parentName:"p"},"Get"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Post"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Put"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Patch"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Delete")," like an example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:"{6-9,13,19,25,31,37}","{6-9,13,19,25,31,37}":!0},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Emsifa\\Evo\\Http\\Param;\nuse Emsifa\\Evo\\Route\\Get;\nuse Emsifa\\Evo\\Route\\Post;\nuse Emsifa\\Evo\\Route\\Put;\nuse Emsifa\\Evo\\Route\\Delete;\n\nclass UserController extends Controller\n{\n    #[Get('users')]\n    public function index()\n    {\n        // ...\n    }\n    \n    #[Post('users')]\n    public function store()\n    {\n        // ...\n    }\n    \n    #[Get('users/{id}')]\n    public function show(#[Param] int $id)\n    {\n        // ...\n    }\n    \n    #[Put('users/{id}')]\n    public function update(#[Param] int $id)\n    {\n        // ...\n    }\n    \n    #[Delete('users/{id}')]\n    public function destroy(#[Param] int $id)\n    {\n        // ...\n    }\n}\n")),(0,a.kt)("h2",{id:"route-prefixing"},"Route Prefixing"),(0,a.kt)("p",null,"If you want to apply route prefix to every routes in a controller, you can attach ",(0,a.kt)("inlineCode",{parentName:"p"},"RoutePrefix")," attribute to  your controller class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:"{6,12}","{6,12}":!0},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Emsifa\\Evo\\Http\\Param;\nuse Emsifa\\Evo\\Route\\RoutePrefix;\nuse Emsifa\\Evo\\Route\\Get;\nuse Emsifa\\Evo\\Route\\Post;\nuse Emsifa\\Evo\\Route\\Put;\nuse Emsifa\\Evo\\Route\\Delete;\n\n#[RoutePrefix('users')]\nclass UserController extends Controller\n{\n    #[Get]\n    public function index()\n    {\n        // ...\n    }\n    \n    #[Post]\n    public function store()\n    {\n        // ...\n    }\n    \n    #[Get('{id}')]\n    public function show(#[Param] int $id)\n    {\n        // ...\n    }\n    \n    #[Put('{id}')]\n    public function update(#[Param] int $id)\n    {\n        // ...\n    }\n    \n    #[Delete('{id}')]\n    public function destroy(#[Param] int $id)\n    {\n        // ...\n    }\n}\n")),(0,a.kt)("h2",{id:"route-naming"},"Route Naming"),(0,a.kt)("p",null,"To set route name, you can set ",(0,a.kt)("inlineCode",{parentName:"p"},"$name")," parameter in route attributes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:"{12,18}","{12,18}":!0},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Emsifa\\Evo\\Http\\Param;\nuse Emsifa\\Evo\\Route\\RoutePrefix;\nuse Emsifa\\Evo\\Route\\Get;\n\n#[RoutePrefix('users')]\nclass UserController extends Controller\n{\n    #[Get(name: 'users.index')]\n    public function index()\n    {\n        // ...\n    }\n    \n    #[Get('{id}', name: 'users.show')]\n    public function show(#[Param] int $id)\n    {\n        // ...\n    }\n}\n")),(0,a.kt)("p",null,"If you want to set name prefix to every routes in a controller, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Emsifa\\Evo\\Route\\RouteName")," attribute to controller class like an example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:"{7,11}","{7,11}":!0},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Emsifa\\Evo\\Http\\Param;\nuse Emsifa\\Evo\\Route\\RoutePrefix;\nuse Emsifa\\Evo\\Route\\RouteName;\nuse Emsifa\\Evo\\Route\\Get;\n\n#[RoutePrefix('users')]\n#[RouteName('users')]\nclass UserController extends Controller\n{\n    #[Get(name: 'index')]\n    public function index()\n    {\n        // ...\n    }\n    \n    #[Get('{id}', name: 'show')]\n    public function show(#[Param] int $id)\n    {\n        // ...\n    }\n}\n")),(0,a.kt)("p",null,"By default ",(0,a.kt)("inlineCode",{parentName:"p"},"RouteName"),' attribute will add "." separator, so example above will add route with names:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"users.index"')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"users.show"'))),(0,a.kt)("p",null,"If you want to use different separator, you can set second parameter. For example if you change example above with ",(0,a.kt)("inlineCode",{parentName:"p"},"RouteName('users', ':')"),', you will have "users:index" and "users:show" route names instead.'),(0,a.kt)("h2",{id:"applying-middleware"},"Applying Middleware"),(0,a.kt)("p",null,"Every route attributes have ",(0,a.kt)("inlineCode",{parentName:"p"},"$middleware")," parameter that you can set to apply middleware. Here is some examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:"{11,17}","{11,17}":!0},'<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Emsifa\\Evo\\Route\\RoutePrefix;\nuse Emsifa\\Evo\\Route\\Get;\n\n#[RoutePrefix(\'users\')]\nclass UserController extends Controller\n{\n    #[Get("/", middleware: "auth")]\n    public function index()\n    {\n        // ...\n    }\n    \n    #[Post("/", middleware: ["auth", "can:store-post"])]\n    public function store()\n    {\n        // ...\n    }\n}\n')),(0,a.kt)("p",null,"If you want to apply same middleware to every routes in a controller, you can attach ",(0,a.kt)("inlineCode",{parentName:"p"},"RouteMiddleware")," to your controller class like an example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php",metastring:"{6,10}","{6,10}":!0},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Emsifa\\Evo\\Route\\RoutePrefix;\nuse Emsifa\\Evo\\Route\\RouteMiddleware;\nuse Emsifa\\Evo\\Route\\Get;\n\n#[RoutePrefix('users')]\n#[RouteMiddleware('auth')]\nclass UserController extends Controller\n{\n    #[Get]\n    public function index()\n    {\n        // ...\n    }\n    \n    #[Post(middleware: \"can:store-post\")]\n    public function store()\n    {\n        // ...\n    }\n}\n")))}m.isMDXComponent=!0}}]);