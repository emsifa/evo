"use strict";(self.webpackChunkevo=self.webpackChunkevo||[]).push([[58],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=i.createContext({}),p=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return i.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,k=c["".concat(u,".").concat(m)]||c[m]||d[m]||a;return n?i.createElement(k,o(o({ref:t},s),{},{components:n})):i.createElement(k,o({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6793:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],l={sidebar_position:5},u="Validation",p={unversionedId:"validation",id:"validation",isDocsHomePage:!1,title:"Validation",description:"Evo will automatically validate request data to every parameters that is attached with attribute that implements Emsifa\\Evo\\Contracts\\RequestValidator interface. Evo's built-in Query, Header, Cookie, Param, and Body attributes is doing validation because they are implementing that interface.",source:"@site/docs/validation.md",sourceDirName:".",slug:"/validation",permalink:"/evo/docs/validation",editUrl:"https://github.com/emsifa/evo/edit/main/website/docs/validation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"DTO",permalink:"/evo/docs/dto"},next:{title:"Response",permalink:"/evo/docs/response"}},s=[{value:"Validating Query, Header, Cookie, and Param",id:"validating-query-header-cookie-and-param",children:[]},{value:"Validating Body",id:"validating-body",children:[]},{value:"Create Your Own Validation Rule",id:"create-your-own-validation-rule",children:[]}],d={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validation"},"Validation"),(0,a.kt)("p",null,"Evo will automatically validate request data to every parameters that is attached with attribute that implements ",(0,a.kt)("inlineCode",{parentName:"p"},"Emsifa\\Evo\\Contracts\\RequestValidator")," interface. Evo's built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"Query"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Header"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Cookie"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Param"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"Body")," attributes is doing validation because they are implementing that interface."),(0,a.kt)("h2",{id:"validating-query-header-cookie-and-param"},"Validating Query, Header, Cookie, and Param"),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"Query"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Header"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Cookie"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"Param")," attributes, by default they choose validation rules by looking for its parameter type. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"#[Get]\npublic function index(\n    #[Query] int $limit,\n    #[Query] int $offset,\n    #[Query] ?string $keyword = null,\n)\n{\n}\n")),(0,a.kt)("p",null,"Evo will apply ",(0,a.kt)("inlineCode",{parentName:"p"},"required|numeric")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"$limit")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$offset"),", also apply rule ",(0,a.kt)("inlineCode",{parentName:"p"},"nullable|string")," rule to ",(0,a.kt)("inlineCode",{parentName:"p"},"$keyword"),"."),(0,a.kt)("p",null,"But you can also use your own validation rules by giving ",(0,a.kt)("inlineCode",{parentName:"p"},"$rules")," to attribute. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"#[Get]\npublic function index(\n    #[Query(rules: 'required|numeric|min:10')] int $limit,\n    #[Query(rules: 'required|numeric|min:0')] int $offset,\n    #[Query] ?string $keyword = null,\n)\n{\n}\n")),(0,a.kt)("p",null,"Now ",(0,a.kt)("inlineCode",{parentName:"p"},"$limit")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$offset")," parameters will use your defined rules instead of using the default rules."),(0,a.kt)("h2",{id:"validating-body"},"Validating Body"),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"Body")," attribute. It will scan its DTO properties, and choose rules for each properties by looking for the property type and finding ",(0,a.kt)("inlineCode",{parentName:"p"},"Illuminate\\Contracts\\Validation\\Rule")," attributes attached to it."),(0,a.kt)("p",null,"For example, if you have controller like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"#[Post('checkout')]\npublic function checkout(#[Body] CheckoutOrderDto $dto)\n{\n    // ...\n}\n")),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"CheckoutOrderDto")," has properties like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Dto;\n\nuse Emsifa\\Evo\\Dto;\nuse Emsifa\\Evo\\Rules;\n\nclass CheckoutOrderDto extends Dto\n{\n    #[Rules\\Required]\n    #[Rules\\Numeric]\n    public string $phone;\n\n    #[Rules\\Required]\n    public string $address;\n\n    #[Rules\\Required]\n    #[Rules\\Numeric]\n    #[Rules\\Size(11)]\n    public string $subdistrict_id;\n\n    #[Rules\\Required]\n    #[Rules\\Numeric]\n    #[Rules\\Size(5)]\n    public string $postal_code;\n\n    #[ArrayOf(CheckoutOrderItemDto::class)]\n    public array $items;\n}\n")),(0,a.kt)("p",null,"And ",(0,a.kt)("inlineCode",{parentName:"p"},"CheckoutOrderItemDto")," like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Dto;\n\nuse Emsifa\\Evo\\Dto;\nuse Emsifa\\Evo\\Rules;\n\nclass CheckoutOrderItemDto extends Dto\n{\n    #[Rules\\Required]\n    #[Rules\\Exists('products', 'id')]\n    public string $product_id;\n\n    #[Rules\\Required]\n    #[Rules\\Numeric]\n    public int $qty;\n}\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Body")," attribute will do this following validation for you:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"Validator::make($data, [\n    'phone' => 'required|string|numeric',\n    'address' => 'required|string',\n    'subdistrict_id' => 'required|string|numeric|size:11',\n    'postal_code' => 'required|string|numeric|size:5',\n    'items' => 'required|array',\n    'items.*.product_id' => 'required|string|exists:product,id',\n    'items.*.qty' => 'required|numeric',\n]);\n")),(0,a.kt)("h2",{id:"create-your-own-validation-rule"},"Create Your Own Validation Rule"),(0,a.kt)("p",null,"Evo's validation rule is basically a class implementing ",(0,a.kt)("inlineCode",{parentName:"p"},"Illuminate\\Contracts\\Validation\\Rule")," interface and has ",(0,a.kt)("inlineCode",{parentName:"p"},"Attribute")," attribute attached on it."),(0,a.kt)("p",null,"For example, we will create ",(0,a.kt)("inlineCode",{parentName:"p"},"Bit"),' rule that only accepts string with "0" and "1" characters.'),(0,a.kt)("p",null,"First, create ",(0,a.kt)("inlineCode",{parentName:"p"},"app/Rules/Bit.php")," file."),(0,a.kt)("p",null,"Then write following code below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nnamespace App\\Rules;\n\nuse Attribute;\nuse Illuminate\\Contracts\\Validation\\Rule;\n\n#[Attribute(Attribute::TARGET_PROPERTY)]\nclass Bit implements Rule\n{\n    public function __construct(protected string $message = \'\')\n    {\n    }\n\n    public function passes($attribute, $value)\n    {\n        return is_string($value) && preg_match("/^(0|1)+$/", $value);\n    }\n\n    public function message()\n    {\n        return __($this->message) ?: __("validation.bit") ?: "Invalid bit string";\n    }\n}\n')),(0,a.kt)("p",null,"That's it! now you can attach it to your DTO's property like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Dto;\n\nuse Emsifa\\Evo\\Dto;\nuse Emsifa\\Evo\\Rules;\nuse App\\Rules\\Bit;\n\nclass MyDto extends Dto\n{\n    #[Rules\\Required]\n    #[Bit]\n    public string $bit_string;\n}\n")))}c.isMDXComponent=!0}}]);